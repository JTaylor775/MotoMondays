// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotoMondays.Data;

namespace MotoMondays.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230413155037_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MotoMondays.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Miles")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MotorcycleID")
                        .HasColumnType("int");

                    b.Property<bool>("PreOwned")
                        .HasColumnType("bit");

                    b.HasKey("InventoryId");

                    b.HasIndex("MotorcycleID");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            InventoryId = 1,
                            Miles = 100m,
                            MotorcycleID = 12,
                            PreOwned = false
                        },
                        new
                        {
                            InventoryId = 2,
                            Miles = 12000m,
                            MotorcycleID = 27,
                            PreOwned = true
                        });
                });

            modelBuilder.Entity("MotoMondays.Models.MaintenanceTicket", b =>
                {
                    b.Property<int>("MaintenanceTicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<int>("MotorcycleID")
                        .HasColumnType("int");

                    b.Property<string>("TicketDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MaintenanceTicketID");

                    b.HasIndex("MotorcycleID");

                    b.HasIndex("UserID");

                    b.ToTable("MaintenanceTickets");

                    b.HasData(
                        new
                        {
                            MaintenanceTicketID = 1,
                            Completed = false,
                            DateSubmitted = new DateTime(2023, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MotorcycleID = 32,
                            TicketDescription = "Oil Change",
                            UserID = 2
                        },
                        new
                        {
                            MaintenanceTicketID = 2,
                            Completed = true,
                            DateSubmitted = new DateTime(2023, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MotorcycleID = 29,
                            TicketDescription = "Tire Change",
                            UserID = 2
                        },
                        new
                        {
                            MaintenanceTicketID = 3,
                            Completed = false,
                            DateSubmitted = new DateTime(2023, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MotorcycleID = 29,
                            TicketDescription = "Transmition rebuild",
                            UserID = 4
                        });
                });

            modelBuilder.Entity("MotoMondays.Models.Motorcycle", b =>
                {
                    b.Property<int>("MotorcycleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VINNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MotorcycleID");

                    b.ToTable("Motorcycles");

                    b.HasData(
                        new
                        {
                            MotorcycleID = 12,
                            Manufacturer = "Yamaha",
                            ModelType = "YZF-R6",
                            VINNumber = "4S3YMHH68B2123456",
                            Year = "2006"
                        },
                        new
                        {
                            MotorcycleID = 27,
                            Manufacturer = "Suzuki",
                            ModelType = "GSXR600",
                            VINNumber = "9B2SZKI72C3868341",
                            Year = "2015"
                        },
                        new
                        {
                            MotorcycleID = 32,
                            Manufacturer = "Honda",
                            ModelType = "CBR-500RR",
                            VINNumber = "5A2HNDA56K1536846",
                            Year = "2014"
                        },
                        new
                        {
                            MotorcycleID = 29,
                            Manufacturer = "Victory",
                            ModelType = "Gunner-1800",
                            VINNumber = "8A6VCTY78R1684562",
                            Year = "2011"
                        });
                });

            modelBuilder.Entity("MotoMondays.Models.Part", b =>
                {
                    b.Property<int>("PartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartID");

                    b.ToTable("Parts");

                    b.HasData(
                        new
                        {
                            PartID = 10,
                            InStock = true,
                            PartName = "600cc Engine"
                        },
                        new
                        {
                            PartID = 20,
                            InStock = true,
                            PartName = "600cc transmission"
                        },
                        new
                        {
                            PartID = 30,
                            InStock = false,
                            PartName = "600cc Forks"
                        },
                        new
                        {
                            PartID = 32,
                            InStock = true,
                            PartName = "400cc Stunt Cage"
                        },
                        new
                        {
                            PartID = 40,
                            InStock = false,
                            PartName = "Road King Saddles Bag(Set)"
                        },
                        new
                        {
                            PartID = 45,
                            InStock = true,
                            PartName = "Harley Crank Shaft"
                        });
                });

            modelBuilder.Entity("MotoMondays.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "e2a63a02-ff18-4a5b-bf89-02c24702e04f",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "de740e3b-d59b-49b7-aa45-6dde6ac9445c",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "3a552cb6-26b0-4615-a21f-c89ecb339b0d",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("MotoMondays.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ScheduleDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<decimal>("Wage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ScheduleID");

                    b.HasIndex("UserID");

                    b.ToTable("Schedule");

                    b.HasData(
                        new
                        {
                            ScheduleID = 1,
                            ScheduleDays = "MTWTF",
                            ScheduleHours = "9-5",
                            UserID = 1,
                            Wage = 12.50m
                        },
                        new
                        {
                            ScheduleID = 2,
                            ScheduleDays = "MWT",
                            ScheduleHours = "8-4",
                            UserID = 2,
                            Wage = 11.25m
                        });
                });

            modelBuilder.Entity("MotoMondays.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "340a08b3-cbb5-4ac7-9772-2a11a9935ba5",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jdoe@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            MiddleName = "Dee",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEP7U4oqcuy2xV5C9yAH0l2zhQK1WFCnJydlMMmka7AqwmMglQWKeUTT6IOTlV90/mw==",
                            PhoneNumber = "402-867-5309",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe8e754c-4bd3-4964-94ab-30b0af7565c1",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "675f8c0f-08b7-48f4-b01e-5b3e648645ae",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anel@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Alex",
                            LastName = "Nelson",
                            LockoutEnabled = false,
                            MiddleName = "Jones",
                            NormalizedUserName = "EMPLOYEE",
                            PasswordHash = "AQAAAAEAACcQAAAAEBcwnEOWwiKWWJOFC8S6pdvKuCN/BpLRY3Zq+bsS0ulm+BF3qhXoEFbs3sk1mWvqFA==",
                            PhoneNumber = "402-111-9999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6870faeb-6dbd-4d17-b947-ce4552424ee1",
                            TwoFactorEnabled = false,
                            UserName = "employee"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd007706-2de3-418f-ba9c-528fd2d553d1",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bbarns@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Bill",
                            LastName = "Barns",
                            LockoutEnabled = false,
                            MiddleName = "Bob",
                            NormalizedUserName = "CUSTOMER",
                            PasswordHash = "AQAAAAEAACcQAAAAEH0GrTL3P8gXW5YjqFQNnhn5jYIWTp33WHrigxmVwkMcNI8ZcuHLKZsJ1gsdGGv9bw==",
                            PhoneNumber = "402-789-1234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d31d14d3-8e14-46d2-b72d-de8c7482cf3d",
                            TwoFactorEnabled = false,
                            UserName = "customer"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7692ad2e-014e-4b2f-bc14-a52a63901e08",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zrothson@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Zack",
                            LastName = "Rothson",
                            LockoutEnabled = false,
                            MiddleName = "Jones",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAELzA1I2AhYGkWPU+oHiQgrTmZq0cJBXP3gfWYEO3n7QXMDxwAGBUKqNM2NIxPm3j7Q==",
                            PhoneNumber = "402-222-8888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52d47587-58bd-40a7-91d3-3d3daccb22fe",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MotoMondays.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MotoMondays.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MotoMondays.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MotoMondays.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoMondays.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MotoMondays.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotoMondays.Models.Inventory", b =>
                {
                    b.HasOne("MotoMondays.Models.Motorcycle", "Motorcycles")
                        .WithMany()
                        .HasForeignKey("MotorcycleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorcycles");
                });

            modelBuilder.Entity("MotoMondays.Models.MaintenanceTicket", b =>
                {
                    b.HasOne("MotoMondays.Models.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoMondays.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorcycle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MotoMondays.Models.Schedule", b =>
                {
                    b.HasOne("MotoMondays.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
